plugins {
    id 'java-library'
    id 'maven-publish'
    id 'signing'
}

group = 'tech.favware'
version = '1.0.0'
description = 'A Java implementation of a Result monad inspired by Rust\'s Result struct'
java.sourceCompatibility = JavaVersion.VERSION_1_8

repositories {
    mavenCentral()
    mavenLocal()
}

test {
    useJUnitPlatform()
}

dependencies {
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.9.2'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.9.2'
}

java {
    withJavadocJar()
    withSourcesJar()
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
    options.compilerArgs += ['-Xlint:unchecked', '-Xlint:deprecation']
}

tasks.withType(Javadoc).configureEach {
    options.encoding = 'UTF-8'
}

signing {
    required { gradle.taskGraph.hasTask("publish") }

    def signingKey = project.findProperty("signing.key") ?: System.getenv("PGP_SIGNING_KEY")
    def signingPassword = project.findProperty("signing.password") ?: System.getenv("PGP_SIGNING_PASSWORD")
    useInMemoryPgpKeys(signingKey, signingPassword)

    sign configurations.archives
    sign publishing.publications
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId = 'result'
            from components.java

            pom {
                name = 'Result'
                description = 'A Java implementation of a Result monad inspired by Rust\'s Result struct.'
                url = 'https://github.com/favware/java-result/'

                licenses {
                    license {
                        name = 'MIT License'
                        url = 'https://opensource.org/licenses/MIT'
                    }
                }
                developers {
                    developer {
                        id = 'favna'
                        name = 'Jeroen Claassens'
                        email = 'support@favware.tech'
                    }
                }
                scm {
                    connection = 'scm:git:git://github.com/favware/java-result.git'
                    developerConnection = 'scm:git:ssh://github.com:favware/java-result.git'
                    url = 'http://github.com/favware/java-result/tree/main'
                }
            }
        }
    }

    repositories {
        maven {
            name = "OSSHR"

            if (project.version.endsWith('-SNAPSHOT')) {
                url = uri("https://s01.oss.sonatype.org/content/repositories/snapshots")
            } else {
                url = uri("https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/")
            }

            credentials {
                username = project.findProperty("osshr.user") ?: System.getenv("OSSHR_USERNAME")
                password = project.findProperty("osshr.key") ?: System.getenv("OSSHR_TOKEN")
            }
        }

        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/favware/java-result")
            credentials {
                username = project.findProperty("gpr.user") ?: System.getenv("GPR_USERNAME")
                password = project.findProperty("gpr.key") ?: System.getenv("GPR_TOKEN")
            }
        }

        maven {
            name = "Local"
            url = layout.buildDirectory.dir('repo')
        }
    }
}

javadoc {
    if (JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption('html5', true)
    }
}
